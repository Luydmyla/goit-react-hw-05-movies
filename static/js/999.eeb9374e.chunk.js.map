{"version":3,"file":"static/js/999.eeb9374e.chunk.js","mappings":"wMACaA,EAAeC,EAAAA,GAAAA,OAAH,mJAOZC,EAAYD,EAAAA,GAAAA,KAAH,uF,kBCFP,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QAC/BC,GAAWC,EAAAA,EAAAA,MAEjB,OADAC,QAAQC,IAAIH,IAEV,UAACL,EAAD,CAAcS,KAAK,SAASL,QAASA,EAArC,WAGE,SAAC,MAAD,CAAaM,KAAK,WAAWC,KAAK,OAHpC,KAG4C,SAACT,EAAD,4B,oLCb1CU,EAAW,+BACXC,EAAU,mCAAhB,SACeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,W,aAAf,O,oBAAA,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,EAAiBC,GAC/B,OAAOX,EAAuB,GAAD,OACxBF,EADwB,gCACQa,EADR,oBACyBZ,EADzB,+CAKxB,SAASa,EAAQC,GACtB,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,4BACqBd,EADrB,oBAKxB,SAASe,EAAWD,GACzB,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,4BACqBd,EADrB,2BAKxB,SAASgB,IACd,OAAOf,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASiB,EAAcH,GAE5B,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,oBACad,M,2IChC/BkB,EAAc9B,EAAAA,GAAAA,GAAH,wRAYX+B,EAAW/B,EAAAA,GAAAA,GAAH,6DAIRgC,EAAYhC,EAAAA,GAAAA,EAAH,+GAMTiC,EAAiBjC,EAAAA,GAAAA,KAAH,8D,SCfZ,SAASkC,IACtB,IAAMC,GAASC,EAAAA,EAAAA,MACf9B,QAAQC,IAAI4B,GACZ,IAAQT,GAAYU,EAAAA,EAAAA,MAAZV,QACR,GAAwBW,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMnC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAIH,IACZoC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAkBf,GAASgB,MAAK,SAAAzB,GAAQ,OAAIsB,EAAQtB,EAASqB,WAC5D,CAACZ,IACJpB,QAAQC,IAAI+B,GAQZ,OACE,iCACE,SAACK,EAAA,EAAD,CAAcxC,QAAS,kBAAMC,GAAU,MACtCkC,IACC,SAACR,EAAD,UACGQ,EAAKM,KAAI,SAAAC,GAAO,OACf,2BACE,gBACEC,IAAG,WAfEC,EAecF,EAAQE,aAdlB,OAAjBA,EACK,6DAGH,kCAAN,OAAyCA,KAW7BC,IAAKH,EAAQI,KACbC,MAAM,SAER,SAACnB,EAAD,UAAWc,EAAQI,QACnB,UAACjB,EAAD,WACG,IADH,cAEY,UAACC,EAAD,WACP,IACAY,EAAQM,UAAW,OACJ,SAZbN,EAAQO,IAbR,IAAAL","sources":["components/Button/Button.styled.js","components/Button/Button.jsx","services/movies-api.js","views/MovieCast/MovieCast.styled.js","views/MovieCast/MovieCast.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const GoBackButton = styled.button`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  background-color: lightyellow;\n  border-radius: 10%;\n`;\nexport const SpanLabel = styled.span`\n  margin-left: 10px;\n  color: darkblue;\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport './Button.styled.js';\nimport { GoBackButton, SpanLabel } from './Button.styled';\nimport { ImArrowLeft } from 'react-icons/im';\n\nexport default function ButtonGoBack({ onClick }) {\n  const navigate = useNavigate();\n  console.log(navigate);\n  return (\n    <GoBackButton type=\"button\" onClick={onClick}>\n      {/* <GoBackButton type=\"button\" onClick={() => navigate('/')}> */}\n      {/* <GoBackButton type=\"button\" onClick={() => navigate(-1)}>  */}\n      <ImArrowLeft fill=\"darkblue\" size=\"32\" /> <SpanLabel> GO BACK</SpanLabel>\n    </GoBackButton>\n    //{' '}\n    // </GoBackButton>\n  );\n}\n\nButtonGoBack.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b799de2e1359641dffd47460cedfbdc0';\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n// гет-запит  по  пошуку фільму\nexport function getMovieBySearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?&query=${query}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n}\n// гет-запит для актерського складу\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n//  гет=запит для оглядів чи відкугів на фільм\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n//  гет-запит популярних фільмів\nexport function GetTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n// гет-запит про інфо фільму по айді\nexport function getMoviesById(movieId) {\n  // а тут наоборот єкспанд автор - когда мі забираем одну книжку, мі прикрепляем к ней ее автора, тоже по айдишнику\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n","import styled from 'styled-components';\n\n//  * Стили компонента ImageGallery\n\nexport const CastGallery = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const CastName = styled.h3`\n  color: red;\n  font-weight: bold;\n`;\nexport const Character = styled.p`\n  display: flex;\n  flex-direction: column;\n  color: darkblue;\n  font-weight: bold;\n`;\nexport const CharacterValue = styled.span`\n  color: blue;\n  font-weight: bold;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ButtonGoBack from '../../components/Button';\nimport * as moviesAPI from '../../services/movies-api';\nimport {\n  CastGallery,\n  Character,\n  CharacterValue,\n  CastName,\n} from '../MovieCast/MovieCast.styled';\n\nexport default function MoviesCast() {\n  const params = useParams();\n  console.log(params);\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const navigate = useNavigate();\n  console.log(navigate);\n  useEffect(() => {\n    moviesAPI.getCast(movieId).then(response => setCast(response.cast));\n  }, [movieId]);\n  console.log(cast);\n  const viewPoster = profile_path => {\n    if (profile_path === null) {\n      return 'https://wipfilms.net/wp-content/data/posters/tt0338683.jpg';\n      // 'NO POSTER';\n    }\n    return `https://image.tmdb.org/t/p/w300${profile_path}`;\n  };\n  return (\n    <>\n      <ButtonGoBack onClick={() => navigate(-1)} />\n      {cast && (\n        <CastGallery>\n          {cast.map(castOne => (\n            <li key={castOne.id}>\n              <img\n                src={`${viewPoster(castOne.profile_path)}`}\n                alt={castOne.name}\n                width=\"240\"\n              />\n              <CastName>{castOne.name}</CastName>\n              <Character>\n                {' '}\n                Character:<CharacterValue>\n                  {' '}\n                  {castOne.character}{' '}\n                </CharacterValue>{' '}\n              </Character>\n            </li>\n          ))}\n        </CastGallery>\n      )}\n    </>\n  );\n}\n"],"names":["GoBackButton","styled","SpanLabel","ButtonGoBack","onClick","navigate","useNavigate","console","log","type","fill","size","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","getMovieBySearch","query","getCast","movieId","getReviews","GetTrending","getMoviesById","CastGallery","CastName","Character","CharacterValue","MoviesCast","params","useParams","useState","cast","setCast","useEffect","moviesAPI","then","Button","map","castOne","src","profile_path","alt","name","width","character","id"],"sourceRoot":""}