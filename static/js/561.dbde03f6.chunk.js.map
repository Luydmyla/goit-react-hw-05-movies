{"version":3,"file":"static/js/561.dbde03f6.chunk.js","mappings":"qLACaA,E,MAAQC,GAAAA,GAAH,me,SCCH,SAASC,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,SAACH,EAAD,UAAQG,M,oLCHXC,EAAW,+BACXC,EAAU,mCAAhB,SACeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,W,aAAf,O,oBAAA,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,EAAiBC,GAC/B,OAAOX,EAAuB,GAAD,OACxBF,EADwB,gCACQa,EADR,oBACyBZ,EADzB,+CAKxB,SAASa,EAAQC,GACtB,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,4BACqBd,EADrB,oBAKxB,SAASe,EAAWD,GACzB,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,4BACqBd,EADrB,2BAKxB,SAASgB,IACd,OAAOf,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASiB,EAAcH,GAE5B,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,oBACad,M,oIC9B7B,SAASkB,IAEtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAIH,GAMZ,OAA4BI,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,OALAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,KAAwBC,MAAK,SAAAvB,GAAQ,OAAIoB,EAAUpB,EAASwB,cAC3D,IACHR,QAAQC,IAAIE,IAGV,iCACE,SAAC,IAAD,CAAa1B,KAAK,mBACjB0B,IACC,wBACGA,EAAOM,KAAI,SAAAC,GAAK,OACf,yBAQE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,SAAkCF,EAAMG,SARjCH,EAAME","sources":["components/PageHeading/PageHeading.styled.js","components/PageHeading/PageHeading.jsx","services/movies-api.js","views/HomeView.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Title = styled.h1`\n  /* width: 300px; */\n  width: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n  margin-top: 0;\n  margin-bottom: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 8px;\n  color: #fff;\n  /* font-size: 40px; */\n  font-weight: 400;\n  text-align: center;\n  background-image: repeating-linear-gradient(\n    -45deg,\n    #606dbc,\n    #606dbc 15px,\n    #465298 15px,\n    #465298 30px\n  );\n`;\n","import { Title } from './PageHeading.styled.js';\n\nexport default function PageHeading({ text }) {\n  return <Title>{text}</Title>;\n}\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b799de2e1359641dffd47460cedfbdc0';\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n// гет-запит  по  пошуку фільму\nexport function getMovieBySearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?&query=${query}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n}\n// гет-запит для актерського складу\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n//  гет=запит для оглядів чи відкугів на фільм\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n//  гет-запит популярних фільмів\nexport function GetTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n// гет-запит про інфо фільму по айді\nexport function getMoviesById(movieId) {\n  // а тут наоборот єкспанд автор - когда мі забираем одну книжку, мі прикрепляем к ней ее автора, тоже по айдишнику\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport * as moviesAPI from '../services/movies-api';\nimport PageHeading from '../components/PageHeading/PageHeading';\n\nexport default function HomeView() {\n  // для того що писати в адресну строку динамічні значення(раптом зміниться шлях фільму наприклад) то використовуємо юз раут метч(для вкладеної навігації )\n  const navigate = useNavigate();\n  console.log(navigate);\n  // const match = useRouteMatch();\n  // console.log(match);\n  // там приходить обєкт, в якому є юрл, от його ми і беремо\n  // const { url } = useRouteMatch();\n\n  const [movies, setMovies] = useState(null);\n  useEffect(() => {\n    moviesAPI.GetTrending().then(response => setMovies(response.results));\n  }, []);\n  console.log(movies);\n\n  return (\n    <>\n      <PageHeading text=\"Trending today\" />\n      {movies && (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              {/* тут можна зробити цілі карточки с картинками, цілі галереї, дивимось, що нам віддав бекенд */}\n              {/* {movie.title} */}\n              {/* але ми хочемо щоб назва фільму була ссілочкою, при клікі на яку ми б переходили на зовсім нову сторінку з всією інформацією про фільм.\n              // тому використовуємо Лінк(він до речі має класснейм, тобто можна стилізувати) (не НавЛінк, тому що ми просто будемо переходити по ссилці на зовсім нову сторінку, тобто наш компонент хоумвью буде розмонтований а новий компонент(з інфо фільму) змонтований */}\n              {/* пишимо куди ми переходимо через шаблонну строку  */}\n              {/* <Link to={`/movies/${movie.id}`}>{movie.title}</Link> */}\n              {/* тут замість букс ставимо юрл */}\n              <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n"],"names":["Title","styled","PageHeading","text","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","getMovieBySearch","query","getCast","movieId","getReviews","GetTrending","getMoviesById","HomeView","navigate","useNavigate","console","log","useState","movies","setMovies","useEffect","moviesAPI","then","results","map","movie","to","id","title"],"sourceRoot":""}