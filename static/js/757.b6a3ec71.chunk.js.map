{"version":3,"file":"static/js/757.b6a3ec71.chunk.js","mappings":"qLACaA,E,MAAQC,GAAAA,GAAH,kU,SCCH,SAASC,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,SAACH,EAAD,UAAQG,M,oLCHXC,EAAW,+BACXC,EAAU,mCAAhB,SACeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,W,aAAf,O,oBAAA,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,EAAiBC,GAC/B,OAAOX,EAAuB,GAAD,OACxBF,EADwB,gCACQa,EADR,oBACyBZ,EADzB,+CAKxB,SAASa,EAAQC,GACtB,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,4BACqBd,EADrB,oBAKxB,SAASe,EAAWD,GACzB,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,4BACqBd,EADrB,2BAKxB,SAASgB,IACd,OAAOf,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASiB,EAAcH,GAE5B,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,oBACad,M,uICnC/BkB,EAAetB,EAAAA,GAAAA,OAAH,mJAOZuB,EAAYvB,EAAAA,GAAAA,KAAH,uF,kBCFP,SAASwB,EAAT,GAAmC,EAAXC,QAAY,IAC3CC,GAAWC,EAAAA,EAAAA,MAEjB,OADAC,QAAQC,IAAIH,IAGV,UAACJ,EAAD,CAAcQ,KAAK,SAASL,QAAS,kBAAMC,GAAU,IAArD,WACE,SAAC,MAAD,CAAaK,KAAK,WAAWC,KAAK,OADpC,KAC4C,SAACT,EAAD,0B,mBCJ1CU,EAAOjC,EAAAA,GAAAA,IAAH,0JAQJkC,EAAYlC,EAAAA,GAAAA,IAAH,uGAKTmC,EAAYnC,EAAAA,GAAAA,IAAH,iEAKA,SAASoC,IAMtB,IAAQlB,GAAYmB,EAAAA,EAAAA,MAAZnB,QAIR,GAA0BoB,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMd,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAIH,IAEZe,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAuBxB,GAASyB,MAAK,SAAAlC,GAAQ,OAAI+B,EAAS/B,QACzD,CAACS,IAEJ,IAQkB0B,EARCC,EAmBnB,OACE,iCACE,SAACrB,EAAD,IAGCe,IACC,iCACE,SAACtC,EAAA,EAAD,CAAaC,KAAI,UAAKqC,EAAMO,UAC5B,mBACA,UAACZ,EAAD,YACE,gBAAKa,IAAG,WA7BCF,EA6BeN,EAAMM,YA5BlB,OAAhBA,EACK,6DAGH,kCAAN,OAAyCA,KAwBaG,IAAKT,EAAMO,SACzD,UAACX,EAAD,YACE,8BAAMI,EAAMO,MAAZ,QACA,yCACA,6BAAKP,EAAMU,SAAX,QACA,oDA1BML,EA0BwBL,EAAMK,aAzBxB,GAAfA,EAAoB,MAyBjB,QACA,uCACA,mCAxBM,SAAAM,GAChB,GAAe,OAAXA,EAGJ,OAAOA,EAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAAMC,KAAK,MAqB5BC,CAAUhB,EAAMW,UAOpB,4BAIN,sDACA,SAACjB,EAAD,WACE,SAAC,KAAD,CAASuB,GAAE,kBAAajB,EAAMkB,GAAnB,SAA8BC,UAAU,OAAnD,qBAKF,SAACzB,EAAD,WACE,SAAC,KAAD,CAASuB,GAAE,kBAAajB,EAAMkB,GAAnB,YAAiCC,UAAU,OAAtD,wBAKF,SAAC,KAAD","sources":["components/PageHeading/PageHeading.styled.js","components/PageHeading/PageHeading.js","services/movies-api.js","components/Button/Button.styled.js","components/Button/Button.jsx","views/MovieDetailsView.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Title = styled.h1`\n  width: 300px;\n  padding: 8px;\n  margin-top: 0;\n  border-radius: 8px;\n  color: #fff;\n  /* font-size: 40px; */\n  font-weight: 400;\n  text-align: center;\n  background-image: repeating-linear-gradient(\n    -45deg,\n    #606dbc,\n    #606dbc 15px,\n    #465298 15px,\n    #465298 30px\n  );\n`;\n","import { Title } from './PageHeading.styled.js';\n\nexport default function PageHeading({ text }) {\n  return <Title>{text}</Title>;\n}\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b799de2e1359641dffd47460cedfbdc0';\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n// гет-запит  по  пошуку фільму\nexport function getMovieBySearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?&query=${query}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n}\n// гет-запит для актерського складу\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n//  гет=запит для оглядів чи відкугів на фільм\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n//  гет-запит популярних фільмів\nexport function GetTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n// гет-запит про інфо фільму по айді\nexport function getMoviesById(movieId) {\n  // а тут наоборот єкспанд автор - когда мі забираем одну книжку, мі прикрепляем к ней ее автора, тоже по айдишнику\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n","import styled from 'styled-components';\nexport const GoBackButton = styled.button`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  background-color: lightyellow;\n  border-radius: 10%;\n`;\nexport const SpanLabel = styled.span`\n  margin-left: 10px;\n  color: darkblue;\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport './Button.styled.js';\nimport { GoBackButton, SpanLabel } from './Button.styled';\nimport { ImArrowLeft } from 'react-icons/im';\n\nexport default function ButtonGoBack({ onClick }) {\n  const navigate = useNavigate();\n  console.log(navigate);\n  return (\n    //   <GoBackButton type=\"button\" onClick={() => navigate('/')}>\n    <GoBackButton type=\"button\" onClick={() => navigate(-1)}>\n      <ImArrowLeft fill=\"darkblue\" size=\"32\" /> <SpanLabel> GO BACK</SpanLabel>\n    </GoBackButton>\n    // </GoBackButton>\n  );\n}\n\nButtonGoBack.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { NavLink, Outlet, useParams, useNavigate } from 'react-router-dom';\nimport PageHeading from '../components/PageHeading/PageHeading';\nimport ButtonGoBack from '../components/Button';\nimport * as movieAPI from '../services/movies-api';\nimport styled from 'styled-components';\n// import { ImArrowLeft } from 'react-icons/im';\n\nconst Link = styled.div`\n  display: inline-block;\n  text-decoration: none;\n  padding: 12px;\n  font-weight: 500;\n  color: #2a363b;\n  font-size: 18px;\n`;\nconst CardMovie = styled.div`\n  display: flex;\n  margin-bottom: 10px;\n  border-bottom: 1px solid #2a363b;\n`;\nconst MovieInfo = styled.div`\n  display: block;\n  margin-left: 20px;\n`;\n\nexport default function MovieDetailsView() {\n  // щоб отримати айдішнік одного фільму викоритовуємо хук - юз парамс\n  // const params = useParams();\n  // console.log(params);\n  // повертає нам обєкт динамічних параметрів\n  //беремо диструктуризуємо з парамс фільмайді\n  const { movieId } = useParams();\n  // ми ще раз робимо хттп запит, тому що якщо користувач просто заходить по ссилці на сторінку одного фільму, то у нас не рендерилися попередні список фільмфі, де був запит на бекенд, і ніякої відповіді від бекенду немає.\n  // ще раз - це якщо користувач відразу ввів адресу одного фільму\n  // обявляємо стейт для одного фільму і роблю юзефект фетч по муві айді і потім записую це в сетмуві\n  const [movie, setMovie] = useState(null);\n  // console.log(movie);\n  const navigate = useNavigate();\n  console.log(navigate);\n\n  useEffect(() => {\n    movieAPI.getMoviesById(movieId).then(response => setMovie(response));\n  }, [movieId]);\n  // функція що перевіряє чи є постер до фільму\n  const viewPoster = poster_path => {\n    if (poster_path === null) {\n      return 'https://wipfilms.net/wp-content/data/posters/tt0338683.jpg';\n      // 'NO POSTER';\n    }\n    return `https://image.tmdb.org/t/p/w300${poster_path}`;\n  };\n  // функція для переводу оцінки користувача в %\n  const userScore = vote_average => {\n    return vote_average * 10 + '%';\n  };\n  // тут перебираємо масив із жанрами через кому і пробел\n  const allGenres = genres => {\n    if (genres === null) {\n      return;\n    }\n    return genres.map(genre => genre.name).join(', ');\n  };\n\n  return (\n    <>\n      <ButtonGoBack />\n      {/* тут використовуємо динамічний параметр взятий з юзпарамс */}\n      {/* якщо прийшда відповідь з бекенду(є фільми) ми можемо щось зарендерить, вибираємо з обєкта що нам потрібно (або це може бути окремий компонент типу карточка фільм кард) */}\n      {movie && (\n        <>\n          <PageHeading text={`${movie.title}`} />\n          <hr />\n          <CardMovie>\n            <img src={`${viewPoster(movie.poster_path)}`} alt={movie.title} />\n            <MovieInfo>\n              <h2> {movie.title} </h2>\n              <h3> Overview: </h3>\n              <p> {movie.overview} </p>\n              <p> User score: {`${userScore(movie.vote_average)}`} </p>\n              <h3> Genres: </h3>\n              <p>\n                {`${allGenres(movie.genres)}`}\n                {/* інший варіант через редьюс - перший аргумент функціі колбек, що приймає акк і текуще значення, \n                      і другий аргумент редьюса - пуста строчка, куди буде записуватись значення і між ними пробел */}\n                {/* {movie.genres.reduce(\n              (acc, currrent) => acc + ' ' + currrent.name,\n              ''\n            )} */}\n                <hr />\n              </p>\n            </MovieInfo>\n          </CardMovie>\n          <h3> Additional information </h3>\n          <Link>\n            <NavLink to={`/movies/${movie.id}/cast`} className=\"Link\">\n              Cast\n            </NavLink>\n          </Link>\n\n          <Link>\n            <NavLink to={`/movies/${movie.id}/reviews`} className=\"Link\">\n              Reviews\n            </NavLink>\n          </Link>\n          {/* тут будуть рендериться відповідні інфо без перезагрузки сторінки */}\n          <Outlet />\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["Title","styled","PageHeading","text","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","getMovieBySearch","query","getCast","movieId","getReviews","GetTrending","getMoviesById","GoBackButton","SpanLabel","ButtonGoBack","onClick","navigate","useNavigate","console","log","type","fill","size","Link","CardMovie","MovieInfo","MovieDetailsView","useParams","useState","movie","setMovie","useEffect","movieAPI","then","vote_average","poster_path","title","src","alt","overview","genres","map","genre","name","join","allGenres","to","id","className"],"sourceRoot":""}